# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2019-02-28 16:22
from __future__ import unicode_literals

import logging

from django.db import migrations, models


logger = logging.getLogger('awx.main.migrations')


def set_compat_flag(apps, schema_editor):
    """We want new inventory sources to default to not using compatibility mode
    but to maintain existing functionality, all existing sources will run
    with this flag set to true
    """
    InventorySource = apps.get_model('main', 'InventorySource')
    # this is in awx.main.constants, but we need this to be frozen in time
    CLOUD_PROVIDERS = ('azure_rm', 'ec2', 'gce', 'vmware', 'openstack', 'rhv', 'satellite6', 'cloudforms', 'tower')
    changed_ct = 0
    for inv_src in InventorySource.objects.filter(source__in=CLOUD_PROVIDERS).iterator():
        inv_src.compatibility_mode = True
        inv_src.save(update_fields=['compatibility_mode'])
        changed_ct += 1
    if changed_ct:
        logger.info('Turned on inventory plugin compatibility mode for {} sources'.format(changed_ct))


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0063_v350_org_host_limits'),
    ]

    operations = [
        migrations.AddField(
            model_name='inventorysource',
            name='compatibility_mode',
            field=models.BooleanField(default=False, help_text='This field is deprecated and will be removed in a future release. Restore old hostvars and names from before the transition to inventory plugins.'),
        ),
        migrations.AddField(
            model_name='inventoryupdate',
            name='compatibility_mode',
            field=models.BooleanField(default=False, help_text='This field is deprecated and will be removed in a future release. Restore old hostvars and names from before the transition to inventory plugins.'),
        ),
        migrations.RunPython(set_compat_flag, migrations.RunPython.noop)
    ]
